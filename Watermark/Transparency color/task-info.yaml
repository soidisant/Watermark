type: edu
files:
- name: src/watermark/Main.kt
  visible: true
  text: |-
    package watermark

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/WatermarkTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.io.File
    import javax.imageio.ImageIO
    import kotlin.math.abs

    class CardGameTest : StageTest<Any>() {

        @DynamicTest(order = 1)
        fun imageNotExistTest4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Incorrect output, when a non existing filename was input.")

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun imageColorCompLess3Test4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}grey.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of image color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun imageBitsPerPixelTest4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}bits16.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The image isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an image with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun watermarkNotExistTest4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile = "test${File.separator}image4.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}notexist.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The file test${File.separator}notexist.png doesn't exist.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a non existing watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun watermarkColorCompLess3Test4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}grey.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}grey.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The number of watermark color components isn't 3.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark that doesn't have 3 color components was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun watermarkBitsPerPixelTest4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}bits16.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}bits16.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The watermark isn't 24 or 32-bit.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when a watermark with no 24 or 32 bits per pixel was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun notSameDimensionsTest4(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}70x50.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}70x50.png").trim().lowercase()
                position = checkOutput(outputString, 0, "The image and watermark dimensions are different.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when The image and watermark dimensions are different."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun usingAlphaChannelTest4(): CheckResult {
            try {
                val outFile = File("test${File.separator}out1.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}watermark3.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}watermark3.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after declining to use the alpha channel."
            )

            outputString = main.execute("25").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("test${File.separator}out1.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out1.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out1.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileAlphaS4(25, 50000,
                    "test${File.separator}image4.png", "test${File.separator}watermark3.png", "test${File.separator}out1.png")) return CheckResult(
                false,
                "Incorrect output image file."
            )

            return CheckResult.correct()
        }

        @DynamicTest(order = 9)
        fun notUsingAlphaChannelTest4(): CheckResult {
            try {
                val outFile = File("test${File.separator}out2.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}watermark3.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}watermark3.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to use the watermark's Alpha channel?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("no").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after declining to use the alpha channel."
            )

            outputString = main.execute("35").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("test${File.separator}out2.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out2.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out2.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileS4(35, 50000,
                    "test${File.separator}image4.png", "test${File.separator}watermark3.png", "test${File.separator}out2.png")) return CheckResult(
                false,
                "Incorrect output image file."
            )

            return CheckResult.correct()
        }

        @DynamicTest(order = 10)
        fun noAlphaChanneNotUsingTransparencylTest4(): CheckResult {
            try {
                val outFile = File("test${File.separator}out3.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}watermark2.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}watermark2.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("no").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after declining to use a transparency color."
            )

            outputString = main.execute("27").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("test${File.separator}out3.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out3.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out3.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileS4(27, 50000,
                    "test${File.separator}image4.png", "test${File.separator}watermark2.png", "test${File.separator}out3.png")) return CheckResult(
                false,
                "Incorrect output image file."
            )

            return CheckResult.correct()
        }

        @DynamicTest(order = 11)
        fun noAlphaChannelUsingTransparencyTest4(): CheckResult {
            try {
                val outFile = File("test${File.separator}out4.png")
                if (outFile.exists()) outFile.delete()
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to delete a previous created output file.")
            }

            val main = TestedProgram()
            var outputString = main.start().trim().lowercase()
            var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Invalid prompt for the image filename.")

            try {
                val infile1 = "test${File.separator}image4.png"
                val inputFile1 = File(infile1)
                if (!inputFile1.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                val infile2 = "test${File.separator}watermark2.png"
                val inputFile2 = File(infile2)
                if (!inputFile2.exists()) {
                    return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                }
                outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after an image filename was input."
                )

                outputString = main.execute("test${File.separator}watermark2.png").trim().lowercase()
                position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after a watermark filename was input."
                )
            } catch  (e: Exception) {
                return CheckResult(false, "An exception was thrown, when trying to open an image file.")
            }

            outputString = main.execute("yes").trim().lowercase()
            position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after accepting the use of a transparent color."
            )

            outputString = main.execute("255 255 255").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the watermark transparency percentage (Integer 0-100):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, after a transparent color input."
            )

            outputString = main.execute("37").trim().lowercase()
            position = checkOutput(outputString, 0, "Input the output image filename (jpg or png extension):".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the transparency percentage was input."
            )

            outputString = main.execute("test${File.separator}out4.png").trim().lowercase()
            position = checkOutput(outputString, 0, "The watermarked image test${File.separator}out4.png has been created.".lowercase())
            if (position == -1) return CheckResult(
                false,
                "Incorrect output, when the output filename was input."
            )

            if (!main.isFinished) return CheckResult(false, "The application didn't exit.")

            val outFile = File("test${File.separator}out4.png")
            if (!outFile.exists()) return CheckResult(
                false,
                "The output file hasn't been created."
            )

            if (!checkIfCorrectOutputFileTransparencyColorS4(37, 50000,
                    "test${File.separator}image4.png", "test${File.separator}watermark2.png", "test${File.separator}out4.png", Color(255, 255, 255)))
                return CheckResult(
                    false,
                    "Incorrect output image file."
                )

            return CheckResult.correct()
        }

        @DynamicTest(order = 12)
        fun invalidTransparencyColorTest4(): CheckResult {
            val colorInputs = listOf("0 0 256", "0 0", "Red", "-1 155 155", "1 1 1 1")
            for (colorInput in colorInputs) {
                val main = TestedProgram()
                var outputString = main.start().trim().lowercase()
                var position = checkOutput(outputString, 0, "Input the image filename:".lowercase())
                if (position == -1) return CheckResult(false, "Invalid prompt for the image filename.")

                try {
                    val infile1 = "test${File.separator}image4.png"
                    val inputFile1 = File(infile1)
                    if (!inputFile1.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    val infile2 = "test${File.separator}watermark2.png"
                    val inputFile2 = File(infile2)
                    if (!inputFile2.exists()) {
                        return CheckResult(false, "An input test image file doesn't exist. Try reloading the project.")
                    }
                    outputString = main.execute("test${File.separator}image4.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Input the watermark image filename:".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after an image filename was input."
                    )

                    outputString = main.execute("test${File.separator}watermark2.png").trim().lowercase()
                    position = checkOutput(outputString, 0, "Do you want to set a transparency color?".lowercase())
                    if (position == -1) return CheckResult(
                        false,
                        "Incorrect output, after a watermark filename was input."
                    )
                } catch (e: Exception) {
                    return CheckResult(false, "An exception was thrown, when trying to open an image file.")
                }

                outputString = main.execute("yes").trim().lowercase()
                position = checkOutput(outputString, 0, "Input a transparency color ([Red] [Green] [Blue]):".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, after accepting the use of a transparent color."
                )

                outputString = main.execute(colorInput).trim().lowercase()
                position = checkOutput(outputString, 0, "The transparency color input is invalid.".lowercase())
                if (position == -1) return CheckResult(
                    false,
                    "Incorrect output, when an invalid transparency color was input."
                )

                if (!main.isFinished) return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkIfCorrectOutputFileTransparencyColorS4(per: Int, err: Long,
                                                    imageStr: String, watStr: String, outStr: String, trColor: Color): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.red == trColor.red && w.green == trColor.green && w.blue == trColor.blue)
                    Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileAlphaS4(per: Int, err: Long,
                                        imageStr: String, watStr: String, outStr: String): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y), true)
                val o = Color(outputImage.getRGB(x ,y))
                val oc = if (w.alpha == 0) Color(i.red, i.green, i.blue)
                else Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }

    fun checkIfCorrectOutputFileS4(per: Int, err: Long,
                                   imageStr: String, watStr: String, outStr: String): Boolean {
        val imageFile = File(imageStr)
        val image = ImageIO.read(imageFile)
        val watermarkFile = File(watStr)
        val watermark = ImageIO.read(watermarkFile)
        val outFile = File(outStr)
        val outputImage = ImageIO.read(outFile)
        var diff: Long = 0
        for (y in 0 until image.height) {
            for (x in 0 until image.width) {
                val i = Color(image.getRGB(x, y))
                val w = Color(watermark.getRGB(x, y))
                val o = Color(outputImage.getRGB(x ,y))
                val oc = Color(
                    ((100 - per) * i.red + per * w.red) / 100,
                    ((100 - per) * i.green + per * w.green) / 100,
                    ((100 - per) * i.blue + per * w.blue) / 100
                )
                diff += abs(oc.red - o.red) + abs(oc.green - o.green) + abs(oc.blue - o.blue)
            }
        }
        return diff <= err
    }


  learner_created: false
- name: test/70x50.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAEYAAAAyCAIAAABu/zoEAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr8+pKKVInYQcchQnSyILxylikWwUNoKrTqYXPqCJg1Jiouj4Fpw8LFYdXBx1tXBVRAEHyBubk6KLlLi/5JCixgPjvvx3X0fd98B3kaFKYZ/HFBUU0/FY0I2tyoEXtELP/oxjZDIDC2RXszAdXzdw8PXuyjPcj/35+iT8wYDPALxHNN0k3iDeGbT1DjvE4dZSZSJz4nHdLog8SPXJYffOBdt9vLMsJ5JzROHiYViB0sdzEq6QjxFHJEVlfK9WYdlzluclUqNte7JXxjMqytprtMcRhxLSCAJARJqKKMCE1FaVVIMpGg/5uIfsv1JcknkKoORYwFVKBBtP/gf/O7WKExOOEnBGND1YlkfI0BgF2jWLev72LKaJ4DvGbhS2/5qA5j9JL3e1iJHQGgbuLhua9IecLkDDD5poi7ako+mt1AA3s/om3LAwC3Qs+b01trH6QOQoa6Wb4CDQ2C0SNnrLu/u7uzt3zOt/n4Ahqlyr9cYpmcAAAAJcEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQflCwQROTKpWJOqAAAAGXRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QV4EOFwAAACBJREFUaN7twQEBAAAAgiD/r25IQAEAAAAAAAAAAAA8GCk2AAEkmiECAAAAAElFTkSuQmCC
  learner_created: false
- name: test/bits16.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAGUAAAAzEAIAAABRWY0xAAABhmlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AYht+milIqCnYQ6ZChCoIFURFHqWIRLJS2QqsOJpf+QZOGJMXFUXAtOPizWHVwcdbVwVUQBH9A3NycFF2kxO+SQosYD+7u4b3vfbn7DhAaFaaaXROAqllGKh4Ts7lVsecVAYQxQOuYxEw9kV7MwHN83cPH97soz/Ku+3P0KXmTAT6ReI7phkW8QTyzaemc94lDrCQpxOfE4wZdkPiR67LLb5yLDgs8M2RkUvPEIWKx2MFyB7OSoRJPE0cUVaN8IeuywnmLs1qpsdY9+QuDeW0lzXWaYcSxhASSECGjhjIqsBClXSPFRIrOYx7+YcefJJdMrjIYORZQhQrJ8YP/we/emoWpSTcpGAO6X2z7YwTo2QWaddv+Prbt5gngfwautLa/2gBmP0mvt7XIEdC/DVxctzV5D7jcAYaedMmQHMlPUygUgPcz+qYcMHgLBNbcvrXOcfoAZKhXyzfAwSEwWqTsdY9393b27d+aVv9+AJNIcrQDNf7qAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH5QodCi8lNhHejgAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAB2SURBVHja7dJBDQAgDMBAwL/nomKPJXcSmt6qOjDgSYC9sBfYC3thL7AX9sJeYC/shb3AXtgLe4G9sBf2AnthL7AX9sJeYC/shb3AXtgLe4G9sBf2AnthL+wF9sJeYC/shb3AXtgLe4G9sBf2AnthL+wF9mKBD19wBmDjgDPbAAAAAElFTkSuQmCC
  learner_created: false
- name: test/grey.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAGUAAAAzCAAAAACrwJn5AAAACXBIWXMAAC4jAAAuIwF4pT92AAAAB3RJTUUH5QodCiwSpYEoQgAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAAuSURBVFjD7c0xEQAACASg1/6dtYWDBwWoyYGOxWKxWCwWi8VisVgsFovFYvmwLF6/AWVrlkPmAAAAAElFTkSuQmCC
  learner_created: false
- name: test/out1.png
  visible: false
  text: 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
  learner_created: false
- name: test/out3.png
  visible: false
  text: 
  learner_created: false
- name: test/watermark2.png
  visible: false
  text: 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
  learner_created: false
- name: test/watermark3.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAZAAAADICAYAAADGFbfiAAAFmklEQVR42u3dWZIiSRBEQe5/6WqpC7RIARnhZq4f+jnTJLE8coF6/fz8vADgr7wJAAgIAAICgIAAICAAICAACAgAAgKAgAAgIAAgIAAICAACAoCAACAgACAgAAgIAAICgIAAICAAICAACAgAAgKAgAAgIAAgIAAICAACAoCAACAgACAgAAgIAAICgIAAICAAICAACAgAAgKAgACAgAAgIAAICAACAoCAAICAACAgAAgIAAICgIAAgIAAICAACAgAAgKAgACAgAAgIAAICAACAoCAAICAACAgAAgIAAICgIAAgIAAICAACAgAAgKAgADAwoD8HsanJr+2J1/fRsYBBGT8Ji0eAgICIiACIiDGAgTkzObwrddk05ozX7x3ICCPbxDfjIeNS0BAQIbHY2pATFKXr0BAAgLyjU3C2YeAgIAIyPXXYtMSEBAQAbFpuf8BAtIcj082CvFw9gECsjwg72wWU14HAgICIiA2LQEBAWkPyFOvwabl/sfp9WBcjMWagEzYuJ98Df97HTcnZeqiaF3MyR9cvv2am359IiQkAjI1IBM/sSUvhKZF/PQHl5RfqG783ldYSATk3QFL/Pc3X2poWbxpG+zUcEx9bD8sIgJy8gxgQsC2bsDpi9Yn9TnHlT4WAiIgMQFxA73jk7t4dIyFgFzewKdMkJRF4/LV7vsFU+Mx6XH94IgIyF8GaNLkSFg0vv+x+57B5Hg0HIuAhD35ICD7bjyLx8xH3B2LgFy5nv3uALVMbE8uicfkDziOI2qd7fs28dP/zSdfajqxwTv7mH0cCY+gn9p0b8/RhrEQEAG5EhBfussMyO33JeXexIaxEJDLATn5kwoti0dA5sfjyTFuOIam4xCQoICc3rRavmPi/sed2E0LyKTxbTkOAXngTRYQ8Wg6+5gS15Rj2DAWAhIWkKQv+QmIgDQEpOXsQ0CWByRtEW2IR1JA0n5ipHnTbRgLARGQmIBsmC8CIiACsjQgT385KPE0fsPZx4aATPp3UzbdDWMhIMOv105aSGn3bFy+EpDJ9wwEREAE5EBAWueLgAiIgAjI4wFJv37afPbhBnrOPUX3PwQk6v7Hk5NlS0A2fuBw9iEgCWMhIMGfNpImoHgIiBvoLl8JyKBPGxv+3rSACIgvEArI+oC88/9tu37aGA8BOf/+CMjKy1cCIiACkvoDipM2LAFZGY+MgEz5yfLpm5Z4ZC7KlM339BON0/eDqWMhIJ6mGReQ9l8r2BKQ5D8iNf3P1y6Mh4A0bVoCsi8gp/7q3YmANPz982ljLiACcj0gSfGYvpmlbu7p73tTaIetN/EQEPG4vYHZeOfcv2s5DgFx/0NABERABERAXL468zo3xyN98TdsWC0br3gIiIAsi4eA3N+wBGTdfci+DWHzUz8C4jLQ7fFv2XzFIzwg7n/cmfTisfcafONYpB5HyLoTEAHJj0fbzc+WDeubr2vDD5UGrkMBafrSmoD0PD3TtFnd/JsjSXMrcN0JiIDkx6P58Uub1avuHmPR2nvFbxzkXfbDGWb6vN58ti8gNhcBQTwQEMQD89q8FhAsMkrmn8tDAoKAgJ/9QEAsXouM/oAYEwHBaT4CYk4LCM4+MAfFQ0AQD/CDgwiIS1fQEBDjICA4+0BAzGcBQTwwH4VDQHDpCgbFw/suIDj7wPw0dwUEAAEBAAEBQEAAEBAABAQAvAkACAgAAgKAgAAgIAAgIAAICAACAoCAACAgACAgAAgIAAICgIAAICAAICAACAgAAgKAgAAgIAAgIAAICAACAoCAACAgACAgAAgIAAICgIAAICAAICAACAgAAgKAgAAgIAAgIAAICAACAoCAAICAACAgAAgIAAICgIAAgIAAICAACAgAAgKAgACAgAAgIAAICAACAoCAAICAACAgAAgIAAICwCb/AJ1TFGRHLKnbAAAAAElFTkSuQmCC
  learner_created: false
- name: test/out4.png
  visible: false
  text: 
  learner_created: false
- name: test/image4.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAZAAAADICAIAAABJdyC1AAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr8+pKKVInYQcchQnSyILxylikWwUNoKrTqYXPqCJg1Jiouj4Fpw8LFYdXBx1tXBVRAEHyBubk6KLlLi/5JCixgPjvvx3X0fd98B3kaFKYZ/HFBUU0/FY0I2tyoEXtELP/oxjZDIDC2RXszAdXzdw8PXuyjPcj/35+iT8wYDPALxHNN0k3iDeGbT1DjvE4dZSZSJz4nHdLog8SPXJYffOBdt9vLMsJ5JzROHiYViB0sdzEq6QjxFHJEVlfK9WYdlzluclUqNte7JXxjMqytprtMcRhxLSCAJARJqKKMCE1FaVVIMpGg/5uIfsv1JcknkKoORYwFVKBBtP/gf/O7WKExOOEnBGND1YlkfI0BgF2jWLev72LKaJ4DvGbhS2/5qA5j9JL3e1iJHQGgbuLhua9IecLkDDD5poi7ako+mt1AA3s/om3LAwC3Qs+b01trH6QOQoa6Wb4CDQ2C0SNnrLu/u7uzt3zOt/n4Ahqlyr9cYpmcAAAAJcEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQflCwQSFCR/4MJNAAAAGXRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QV4EOFwAAAqdJREFUeNrt3b1twlAUgFFAb4LIEnQZgQGCImpc00GF2CBNJnDDBpSBjhYWQHQ0GSEdSFFWcBqkpEyEnn/PGcDgi/Xpunl0szTpANRBzwgAwQIQLECwAAQLQLAAwQIQLADBAgQLQLAABAsQLADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECuAkxLvq6/zTZ37I0MQSwYQGCBSBYAIIFCBaAYAEIFiBYAIIF8EfBCCje8utkCI20fniyYQEIFiBYAIIFCBaAYAEIFiBYAIIFIFiAYAEIFoBgAYIFIFgA/+U8rHoYfgwiXfn98WK8CBY/FtvpnVc4j47GCF4JAcECECxAsAAEC0CwAMECECwAwQIEC0CwAAQLECwAwQIQLKCRopyHlaVJBW/1/kOpABsWgGABggUgWACCBQgWgGABCBYgWACCBSBYgGABCBaAYAGCBSBYgGABCBaAYAGCBSBYAIIFCBaAYAEIFiBYAIIFIFhAM4UCPuNt063CrS782pX5dZYTg2/d4zSf5TYswCshgGABCBYgWACCBSBYgGABCBaAYAGCBVCS0J5bHee7+n75VafvYQUbFiBYAIIFCBaAYAEIFiBYAIIFIFiAYAEIFoBgAYIFIFgAggUIFkCZghHUwsvxaghgwwIEC0CwAMECECwAwQIEC0CwAAQLECwAwQIQLECwAAQLQLAAwQIQLADBAgQLQLAABAsQLADBAhAsQLAAovPPz5Tg+TAyBGxYgGABCBaAYAGCBSBYAIIFCBaAYAEIFiBYAIIFIFiAYAFEVsTxMvNZbtCADQsQLADBAhAsQLAABAtAsADBAhAsAMECBAtAsAAECxAsAMECECxAsAAEC0CwAMECECwAwQIEC0CwAMECECwAwQIEC0CwAAQLaI9vKKEfLbv24tQAAAAASUVORK5CYII=
  learner_created: false
- name: test/out2.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/222/stages/1115/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 20 Jun 2022 15:28:11 UTC
record: 4
